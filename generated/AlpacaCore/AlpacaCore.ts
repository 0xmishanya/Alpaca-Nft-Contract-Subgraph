// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BornBatch extends ethereum.Event {
  get params(): BornBatch__Params {
    return new BornBatch__Params(this);
  }
}

export class BornBatch__Params {
  _event: BornBatch;

  constructor(event: BornBatch) {
    this._event = event;
  }

  get alpacaIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get genes(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get energy(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class BornSingle extends ethereum.Event {
  get params(): BornSingle__Params {
    return new BornSingle__Params(this);
  }
}

export class BornSingle__Params {
  _event: BornSingle;

  constructor(event: BornSingle) {
    this._event = event;
  }

  get alpacaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gene(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get energy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnergyChanged extends ethereum.Event {
  get params(): EnergyChanged__Params {
    return new EnergyChanged__Params(this);
  }
}

export class EnergyChanged__Params {
  _event: EnergyChanged;

  constructor(event: EnergyChanged) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldEnergy(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newEnergy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GrantedToBreed extends ethereum.Event {
  get params(): GrantedToBreed__Params {
    return new GrantedToBreed__Params(this);
  }
}

export class GrantedToBreed__Params {
  _event: GrantedToBreed;

  constructor(event: GrantedToBreed) {
    this._event = event;
  }

  get alpacaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Hatched extends ethereum.Event {
  get params(): Hatched__Params {
    return new Hatched__Params(this);
  }
}

export class Hatched__Params {
  _event: Hatched;

  constructor(event: Hatched) {
    this._event = event;
  }

  get eggId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get matronId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sireId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cooldownEndBlock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AlpacaCore__getAlpacaResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }
}

export class AlpacaCore extends ethereum.SmartContract {
  static bind(address: Address): AlpacaCore {
    return new AlpacaCore("AlpacaCore", address);
  }

  GEN0_GENERATION_FACTOR(): BigInt {
    let result = super.call(
      "GEN0_GENERATION_FACTOR",
      "GEN0_GENERATION_FACTOR():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_GEN0_GENERATION_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GEN0_GENERATION_FACTOR",
      "GEN0_GENERATION_FACTOR():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_GEN0_ENERGY(): BigInt {
    let result = super.call(
      "MAX_GEN0_ENERGY",
      "MAX_GEN0_ENERGY():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_GEN0_ENERGY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_GEN0_ENERGY",
      "MAX_GEN0_ENERGY():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alpa(): Address {
    let result = super.call("alpa", "alpa():(address)", []);

    return result[0].toAddress();
  }

  try_alpa(): ethereum.CallResult<Address> {
    let result = super.tryCall("alpa", "alpa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  autoCrackingFee(): BigInt {
    let result = super.call(
      "autoCrackingFee",
      "autoCrackingFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_autoCrackingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "autoCrackingFee",
      "autoCrackingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  baseHatchingFee(): BigInt {
    let result = super.call(
      "baseHatchingFee",
      "baseHatchingFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_baseHatchingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseHatchingFee",
      "baseHatchingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devAddress(): Address {
    let result = super.call("devAddress", "devAddress():(address)", []);

    return result[0].toAddress();
  }

  try_devAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("devAddress", "devAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devBreedingPercentage(): BigInt {
    let result = super.call(
      "devBreedingPercentage",
      "devBreedingPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_devBreedingPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "devBreedingPercentage",
      "devBreedingPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  geneScience(): Address {
    let result = super.call("geneScience", "geneScience():(address)", []);

    return result[0].toAddress();
  }

  try_geneScience(): ethereum.CallResult<Address> {
    let result = super.tryCall("geneScience", "geneScience():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  generationHatchingFeeMultiplier(): BigInt {
    let result = super.call(
      "generationHatchingFeeMultiplier",
      "generationHatchingFeeMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_generationHatchingFeeMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "generationHatchingFeeMultiplier",
      "generationHatchingFeeMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAlpaca(_id: BigInt): AlpacaCore__getAlpacaResult {
    let result = super.call(
      "getAlpaca",
      "getAlpaca(uint256):(uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new AlpacaCore__getAlpacaResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt()
    );
  }

  try_getAlpaca(_id: BigInt): ethereum.CallResult<AlpacaCore__getAlpacaResult> {
    let result = super.tryCall(
      "getAlpaca",
      "getAlpaca(uint256):(uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AlpacaCore__getAlpacaResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt()
      )
    );
  }

  getTotalAlpaca(): BigInt {
    let result = super.call("getTotalAlpaca", "getTotalAlpaca():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalAlpaca(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAlpaca",
      "getTotalAlpaca():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPermissionToBreedAsSire(_addr: Address, _id: BigInt): boolean {
    let result = super.call(
      "hasPermissionToBreedAsSire",
      "hasPermissionToBreedAsSire(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasPermissionToBreedAsSire(
    _addr: Address,
    _id: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPermissionToBreedAsSire",
      "hasPermissionToBreedAsSire(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hatchingALPACost(_matronId: BigInt, _sireId: BigInt): BigInt {
    let result = super.call(
      "hatchingALPACost",
      "hatchingALPACost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_matronId),
        ethereum.Value.fromUnsignedBigInt(_sireId)
      ]
    );

    return result[0].toBigInt();
  }

  try_hatchingALPACost(
    _matronId: BigInt,
    _sireId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hatchingALPACost",
      "hatchingALPACost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_matronId),
        ethereum.Value.fromUnsignedBigInt(_sireId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hatchingDuration(): BigInt {
    let result = super.call(
      "hatchingDuration",
      "hatchingDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_hatchingDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hatchingDuration",
      "hatchingDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hatchingMultiplierCoolDown(): BigInt {
    let result = super.call(
      "hatchingMultiplierCoolDown",
      "hatchingMultiplierCoolDown():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_hatchingMultiplierCoolDown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hatchingMultiplierCoolDown",
      "hatchingMultiplierCoolDown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwnerOf(_account: Address, _alpacaId: BigInt): boolean {
    let result = super.call("isOwnerOf", "isOwnerOf(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_account),
      ethereum.Value.fromUnsignedBigInt(_alpacaId)
    ]);

    return result[0].toBoolean();
  }

  try_isOwnerOf(
    _account: Address,
    _alpacaId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOwnerOf",
      "isOwnerOf(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_alpacaId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReadyToCrack(_id: BigInt): boolean {
    let result = super.call(
      "isReadyToCrack",
      "isReadyToCrack(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBoolean();
  }

  try_isReadyToCrack(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReadyToCrack",
      "isReadyToCrack(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxHatchCostMultiplier(): i32 {
    let result = super.call(
      "maxHatchCostMultiplier",
      "maxHatchCostMultiplier():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_maxHatchCostMultiplier(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxHatchCostMultiplier",
      "maxHatchCostMultiplier():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  newBornCoolDown(): BigInt {
    let result = super.call(
      "newBornCoolDown",
      "newBornCoolDown():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_newBornCoolDown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newBornCoolDown",
      "newBornCoolDown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  secondsPerBlock(): BigInt {
    let result = super.call(
      "secondsPerBlock",
      "secondsPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondsPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondsPerBlock",
      "secondsPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingAddress(): Address {
    let result = super.call("stakingAddress", "stakingAddress():(address)", []);

    return result[0].toAddress();
  }

  try_stakingAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingAddress",
      "stakingAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _alpa(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _geneScience(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _devAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _stakingAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClearPermissionToBreedCall extends ethereum.Call {
  get inputs(): ClearPermissionToBreedCall__Inputs {
    return new ClearPermissionToBreedCall__Inputs(this);
  }

  get outputs(): ClearPermissionToBreedCall__Outputs {
    return new ClearPermissionToBreedCall__Outputs(this);
  }
}

export class ClearPermissionToBreedCall__Inputs {
  _call: ClearPermissionToBreedCall;

  constructor(call: ClearPermissionToBreedCall) {
    this._call = call;
  }

  get _alpacaId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClearPermissionToBreedCall__Outputs {
  _call: ClearPermissionToBreedCall;

  constructor(call: ClearPermissionToBreedCall) {
    this._call = call;
  }
}

export class CrackCall extends ethereum.Call {
  get inputs(): CrackCall__Inputs {
    return new CrackCall__Inputs(this);
  }

  get outputs(): CrackCall__Outputs {
    return new CrackCall__Outputs(this);
  }
}

export class CrackCall__Inputs {
  _call: CrackCall;

  constructor(call: CrackCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CrackCall__Outputs {
  _call: CrackCall;

  constructor(call: CrackCall) {
    this._call = call;
  }
}

export class CreateGen0AlpacaCall extends ethereum.Call {
  get inputs(): CreateGen0AlpacaCall__Inputs {
    return new CreateGen0AlpacaCall__Inputs(this);
  }

  get outputs(): CreateGen0AlpacaCall__Outputs {
    return new CreateGen0AlpacaCall__Outputs(this);
  }
}

export class CreateGen0AlpacaCall__Inputs {
  _call: CreateGen0AlpacaCall;

  constructor(call: CreateGen0AlpacaCall) {
    this._call = call;
  }

  get _gene(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _energy(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateGen0AlpacaCall__Outputs {
  _call: CreateGen0AlpacaCall;

  constructor(call: CreateGen0AlpacaCall) {
    this._call = call;
  }
}

export class CreateGen0AlpacaBatchCall extends ethereum.Call {
  get inputs(): CreateGen0AlpacaBatchCall__Inputs {
    return new CreateGen0AlpacaBatchCall__Inputs(this);
  }

  get outputs(): CreateGen0AlpacaBatchCall__Outputs {
    return new CreateGen0AlpacaBatchCall__Outputs(this);
  }
}

export class CreateGen0AlpacaBatchCall__Inputs {
  _call: CreateGen0AlpacaBatchCall;

  constructor(call: CreateGen0AlpacaBatchCall) {
    this._call = call;
  }

  get _genes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _energies(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateGen0AlpacaBatchCall__Outputs {
  _call: CreateGen0AlpacaBatchCall;

  constructor(call: CreateGen0AlpacaBatchCall) {
    this._call = call;
  }
}

export class GrandPermissionToBreedCall extends ethereum.Call {
  get inputs(): GrandPermissionToBreedCall__Inputs {
    return new GrandPermissionToBreedCall__Inputs(this);
  }

  get outputs(): GrandPermissionToBreedCall__Outputs {
    return new GrandPermissionToBreedCall__Outputs(this);
  }
}

export class GrandPermissionToBreedCall__Inputs {
  _call: GrandPermissionToBreedCall;

  constructor(call: GrandPermissionToBreedCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sireId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GrandPermissionToBreedCall__Outputs {
  _call: GrandPermissionToBreedCall;

  constructor(call: GrandPermissionToBreedCall) {
    this._call = call;
  }
}

export class HatchCall extends ethereum.Call {
  get inputs(): HatchCall__Inputs {
    return new HatchCall__Inputs(this);
  }

  get outputs(): HatchCall__Outputs {
    return new HatchCall__Outputs(this);
  }
}

export class HatchCall__Inputs {
  _call: HatchCall;

  constructor(call: HatchCall) {
    this._call = call;
  }

  get _matronId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sireId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HatchCall__Outputs {
  _call: HatchCall;

  constructor(call: HatchCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetAlpaContractCall extends ethereum.Call {
  get inputs(): SetAlpaContractCall__Inputs {
    return new SetAlpaContractCall__Inputs(this);
  }

  get outputs(): SetAlpaContractCall__Outputs {
    return new SetAlpaContractCall__Outputs(this);
  }
}

export class SetAlpaContractCall__Inputs {
  _call: SetAlpaContractCall;

  constructor(call: SetAlpaContractCall) {
    this._call = call;
  }

  get _alpa(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAlpaContractCall__Outputs {
  _call: SetAlpaContractCall;

  constructor(call: SetAlpaContractCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetAutoCrackingFeeCall extends ethereum.Call {
  get inputs(): SetAutoCrackingFeeCall__Inputs {
    return new SetAutoCrackingFeeCall__Inputs(this);
  }

  get outputs(): SetAutoCrackingFeeCall__Outputs {
    return new SetAutoCrackingFeeCall__Outputs(this);
  }
}

export class SetAutoCrackingFeeCall__Inputs {
  _call: SetAutoCrackingFeeCall;

  constructor(call: SetAutoCrackingFeeCall) {
    this._call = call;
  }

  get _autoCrackingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAutoCrackingFeeCall__Outputs {
  _call: SetAutoCrackingFeeCall;

  constructor(call: SetAutoCrackingFeeCall) {
    this._call = call;
  }
}

export class SetBaseHatchingFeeCall extends ethereum.Call {
  get inputs(): SetBaseHatchingFeeCall__Inputs {
    return new SetBaseHatchingFeeCall__Inputs(this);
  }

  get outputs(): SetBaseHatchingFeeCall__Outputs {
    return new SetBaseHatchingFeeCall__Outputs(this);
  }
}

export class SetBaseHatchingFeeCall__Inputs {
  _call: SetBaseHatchingFeeCall;

  constructor(call: SetBaseHatchingFeeCall) {
    this._call = call;
  }

  get _baseHatchingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseHatchingFeeCall__Outputs {
  _call: SetBaseHatchingFeeCall;

  constructor(call: SetBaseHatchingFeeCall) {
    this._call = call;
  }
}

export class SetDevAddressCall extends ethereum.Call {
  get inputs(): SetDevAddressCall__Inputs {
    return new SetDevAddressCall__Inputs(this);
  }

  get outputs(): SetDevAddressCall__Outputs {
    return new SetDevAddressCall__Outputs(this);
  }
}

export class SetDevAddressCall__Inputs {
  _call: SetDevAddressCall;

  constructor(call: SetDevAddressCall) {
    this._call = call;
  }

  get _devAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDevAddressCall__Outputs {
  _call: SetDevAddressCall;

  constructor(call: SetDevAddressCall) {
    this._call = call;
  }
}

export class SetDevBreedingPercentageCall extends ethereum.Call {
  get inputs(): SetDevBreedingPercentageCall__Inputs {
    return new SetDevBreedingPercentageCall__Inputs(this);
  }

  get outputs(): SetDevBreedingPercentageCall__Outputs {
    return new SetDevBreedingPercentageCall__Outputs(this);
  }
}

export class SetDevBreedingPercentageCall__Inputs {
  _call: SetDevBreedingPercentageCall;

  constructor(call: SetDevBreedingPercentageCall) {
    this._call = call;
  }

  get _devBreedingPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDevBreedingPercentageCall__Outputs {
  _call: SetDevBreedingPercentageCall;

  constructor(call: SetDevBreedingPercentageCall) {
    this._call = call;
  }
}

export class SetGeneScienceCall extends ethereum.Call {
  get inputs(): SetGeneScienceCall__Inputs {
    return new SetGeneScienceCall__Inputs(this);
  }

  get outputs(): SetGeneScienceCall__Outputs {
    return new SetGeneScienceCall__Outputs(this);
  }
}

export class SetGeneScienceCall__Inputs {
  _call: SetGeneScienceCall;

  constructor(call: SetGeneScienceCall) {
    this._call = call;
  }

  get _geneScience(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGeneScienceCall__Outputs {
  _call: SetGeneScienceCall;

  constructor(call: SetGeneScienceCall) {
    this._call = call;
  }
}

export class SetGenerationHatchingFeeMultiplierCall extends ethereum.Call {
  get inputs(): SetGenerationHatchingFeeMultiplierCall__Inputs {
    return new SetGenerationHatchingFeeMultiplierCall__Inputs(this);
  }

  get outputs(): SetGenerationHatchingFeeMultiplierCall__Outputs {
    return new SetGenerationHatchingFeeMultiplierCall__Outputs(this);
  }
}

export class SetGenerationHatchingFeeMultiplierCall__Inputs {
  _call: SetGenerationHatchingFeeMultiplierCall;

  constructor(call: SetGenerationHatchingFeeMultiplierCall) {
    this._call = call;
  }

  get _generationHatchingFeeMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGenerationHatchingFeeMultiplierCall__Outputs {
  _call: SetGenerationHatchingFeeMultiplierCall;

  constructor(call: SetGenerationHatchingFeeMultiplierCall) {
    this._call = call;
  }
}

export class SetHatchingDurationCall extends ethereum.Call {
  get inputs(): SetHatchingDurationCall__Inputs {
    return new SetHatchingDurationCall__Inputs(this);
  }

  get outputs(): SetHatchingDurationCall__Outputs {
    return new SetHatchingDurationCall__Outputs(this);
  }
}

export class SetHatchingDurationCall__Inputs {
  _call: SetHatchingDurationCall;

  constructor(call: SetHatchingDurationCall) {
    this._call = call;
  }

  get _hatchingDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHatchingDurationCall__Outputs {
  _call: SetHatchingDurationCall;

  constructor(call: SetHatchingDurationCall) {
    this._call = call;
  }
}

export class SetHatchingMultiplierCoolDownCall extends ethereum.Call {
  get inputs(): SetHatchingMultiplierCoolDownCall__Inputs {
    return new SetHatchingMultiplierCoolDownCall__Inputs(this);
  }

  get outputs(): SetHatchingMultiplierCoolDownCall__Outputs {
    return new SetHatchingMultiplierCoolDownCall__Outputs(this);
  }
}

export class SetHatchingMultiplierCoolDownCall__Inputs {
  _call: SetHatchingMultiplierCoolDownCall;

  constructor(call: SetHatchingMultiplierCoolDownCall) {
    this._call = call;
  }

  get _hatchingMultiplierCoolDown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHatchingMultiplierCoolDownCall__Outputs {
  _call: SetHatchingMultiplierCoolDownCall;

  constructor(call: SetHatchingMultiplierCoolDownCall) {
    this._call = call;
  }
}

export class SetMaxHatchCostMultiplierCall extends ethereum.Call {
  get inputs(): SetMaxHatchCostMultiplierCall__Inputs {
    return new SetMaxHatchCostMultiplierCall__Inputs(this);
  }

  get outputs(): SetMaxHatchCostMultiplierCall__Outputs {
    return new SetMaxHatchCostMultiplierCall__Outputs(this);
  }
}

export class SetMaxHatchCostMultiplierCall__Inputs {
  _call: SetMaxHatchCostMultiplierCall;

  constructor(call: SetMaxHatchCostMultiplierCall) {
    this._call = call;
  }

  get _maxHatchCostMultiplier(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMaxHatchCostMultiplierCall__Outputs {
  _call: SetMaxHatchCostMultiplierCall;

  constructor(call: SetMaxHatchCostMultiplierCall) {
    this._call = call;
  }
}

export class SetNewBornCoolDownCall extends ethereum.Call {
  get inputs(): SetNewBornCoolDownCall__Inputs {
    return new SetNewBornCoolDownCall__Inputs(this);
  }

  get outputs(): SetNewBornCoolDownCall__Outputs {
    return new SetNewBornCoolDownCall__Outputs(this);
  }
}

export class SetNewBornCoolDownCall__Inputs {
  _call: SetNewBornCoolDownCall;

  constructor(call: SetNewBornCoolDownCall) {
    this._call = call;
  }

  get _newBornCoolDown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNewBornCoolDownCall__Outputs {
  _call: SetNewBornCoolDownCall;

  constructor(call: SetNewBornCoolDownCall) {
    this._call = call;
  }
}

export class SetSecondsPerBlockCall extends ethereum.Call {
  get inputs(): SetSecondsPerBlockCall__Inputs {
    return new SetSecondsPerBlockCall__Inputs(this);
  }

  get outputs(): SetSecondsPerBlockCall__Outputs {
    return new SetSecondsPerBlockCall__Outputs(this);
  }
}

export class SetSecondsPerBlockCall__Inputs {
  _call: SetSecondsPerBlockCall;

  constructor(call: SetSecondsPerBlockCall) {
    this._call = call;
  }

  get _secs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSecondsPerBlockCall__Outputs {
  _call: SetSecondsPerBlockCall;

  constructor(call: SetSecondsPerBlockCall) {
    this._call = call;
  }
}

export class SetStakingAddressCall extends ethereum.Call {
  get inputs(): SetStakingAddressCall__Inputs {
    return new SetStakingAddressCall__Inputs(this);
  }

  get outputs(): SetStakingAddressCall__Outputs {
    return new SetStakingAddressCall__Outputs(this);
  }
}

export class SetStakingAddressCall__Inputs {
  _call: SetStakingAddressCall;

  constructor(call: SetStakingAddressCall) {
    this._call = call;
  }

  get _stakingAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingAddressCall__Outputs {
  _call: SetStakingAddressCall;

  constructor(call: SetStakingAddressCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get _newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class TransferOperatorCall extends ethereum.Call {
  get inputs(): TransferOperatorCall__Inputs {
    return new TransferOperatorCall__Inputs(this);
  }

  get outputs(): TransferOperatorCall__Outputs {
    return new TransferOperatorCall__Outputs(this);
  }
}

export class TransferOperatorCall__Inputs {
  _call: TransferOperatorCall;

  constructor(call: TransferOperatorCall) {
    this._call = call;
  }

  get _newOperator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOperatorCall__Outputs {
  _call: TransferOperatorCall;

  constructor(call: TransferOperatorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateAlpacaEnergyCall extends ethereum.Call {
  get inputs(): UpdateAlpacaEnergyCall__Inputs {
    return new UpdateAlpacaEnergyCall__Inputs(this);
  }

  get outputs(): UpdateAlpacaEnergyCall__Outputs {
    return new UpdateAlpacaEnergyCall__Outputs(this);
  }
}

export class UpdateAlpacaEnergyCall__Inputs {
  _call: UpdateAlpacaEnergyCall;

  constructor(call: UpdateAlpacaEnergyCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newEnergy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateAlpacaEnergyCall__Outputs {
  _call: UpdateAlpacaEnergyCall;

  constructor(call: UpdateAlpacaEnergyCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}
